# Unit test steps

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(AP_PYTHON_VERSION)'
    architecture: 'x64'

#- bash: |
#    python -m pip install --upgrade pip setuptools wheel
#    pip install pytest pytest-cov pytest-runner graphviz pylint requests pyyaml Pillow
#    if [ "${{ parameters.tensorflow_version }}" == "" ]; then
#      pip install tensorflow
#    else
#      pip install tensorflow==${{ parameters.tensorflow_version }}
#    fi
#    if [ "${{ parameters.onnx_version }}" == "" ]; then
#      pip install onnx
#    else
#      pip install onnx==${{ parameters.onnx_version }}
#    fi
#    if [ "${{ parameters.onnx_backend_version }}" == "" ]; then
#      pip install ${{ parameters.onnx_backend }}
#    else
#      pip install ${{ parameters.onnx_backend }}==${{ parameters.onnx_backend_version }}
#    fi
#    echo "using ${{ parameters.onnx_backend }} as onnx backend"
#    # install onnx converter-"tf2onnx"
#    python setup.py install
#    pip list
#  displayName: 'Install dependencies'
#
#- bash: pylint --rcfile=tools/pylintrc --ignore=version.py --disable=cyclic-import tf2onnx tests/*.py tools
#  displayName: 'Pylint'
#
#- bash: |
#    # unit tests generated artifically
#    echo "running unit tests"
#    export TF2ONNX_TEST_OPSET=${{ parameters.opset_version }}
#    python -m pytest --cov=tf2onnx --cov-report=term  --disable-pytest-warnings -r s tests
#  condition: eq('${{ parameters.test_case }}', 'unit_test')
#  displayName: 'unit test'
#
#- bash: |
#    set -ex
#    # real model tests
#    echo "running pretrained model tests"
#    python tests/run_pretrained_models.py --config tests/unity.yaml --opset ${{ parameters.opset_version }}
#    python tests/run_pretrained_models.py --config tests/run_pretrained_models.yaml --opset ${{ parameters.opset_version }}
#  condition: eq('${{ parameters.test_case }}', 'pretrained_model')
#  displayName: 'pretrained_model test'